version: "3.7"
services:
  # Postgresql database
  db:
    image: postgres:latest
    container_name: ${PROJ_NAME}_db
    env_file: .env
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - ${DB_PORT}:${DB_PORT}
    volumes:
      - database:/var/lib/postgresql/data
    networks:
      - database

  # RabbitMQ manager queque
  rabbitmq:
    image: rabbitmq
    container_name: ${PROJ_NAME}_rabbitmq
    hostname: rabbitmq
    env_file: .env
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - task_queque
    volumes:
      - rabbitmq:/var/lib/rabbitmq

  backend_base: &backendbase
    env_file: .env
    build:
      context: ./backend
      args:
        ENVIRONMENT: ${ENVIRONMENT}
    image: ${PROJ_NAME}_backend:${IMG_VERSION}
    volumes:
      - ./backend:/usr/src/app

  # Celery worker
  worker:
    <<: *backendbase
    image: ${PROJ_NAME}_backend:${IMG_VERSION}
    container_name: ${PROJ_NAME}_worker_${IMG_VERSION}
    command: bash -c "sleep 15 && sh run_task.sh"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    depends_on:
      - rabbitmq
      - db
    environment:
      - C_FORCE_ROOT=true
    networks:
      - task_queque
      - database

  # Django backend
  backend:
    <<: *backendbase
    image: ${PROJ_NAME}_backend:${IMG_VERSION}
    container_name: ${PROJ_NAME}_backend_${IMG_VERSION}
    command: bash -c "sleep 5 && sh run.sh"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    depends_on:
      - db
    networks:
      - backend
      - task_queque
      - database

volumes:
  database:
  rabbitmq:

networks:
  backend:
  database:
  task_queque:
